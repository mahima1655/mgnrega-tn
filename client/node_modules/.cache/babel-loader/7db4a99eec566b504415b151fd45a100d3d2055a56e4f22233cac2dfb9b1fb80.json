{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = '/api';\nexport const api = {\n  getDistricts: () => axios.get(`${API_BASE}/districts`),\n  getDistrictData: district => axios.get(`${API_BASE}/district/${district}`),\n  getStateAverage: () => axios.get(`${API_BASE}/state-average`),\n  refreshData: () => axios.post(`${API_BASE}/refresh-data`)\n};\nexport const detectLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      try {\n        var _addressData$address, _addressData$address2, _addressData$address3, _addressData$address4, _addressData$address5, _addressData$address6;\n        // Use Nominatim for reverse geocoding\n        const response = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}&addressdetails=1`);\n        const addressData = response.data;\n        const districts = await api.getDistricts();\n\n        // Try multiple address components\n        const addressComponents = [(_addressData$address = addressData.address) === null || _addressData$address === void 0 ? void 0 : _addressData$address.state_district, (_addressData$address2 = addressData.address) === null || _addressData$address2 === void 0 ? void 0 : _addressData$address2.county, (_addressData$address3 = addressData.address) === null || _addressData$address3 === void 0 ? void 0 : _addressData$address3.city, (_addressData$address4 = addressData.address) === null || _addressData$address4 === void 0 ? void 0 : _addressData$address4.town, addressData.display_name].filter(Boolean);\n        let detectedDistrict = null;\n\n        // Check each address component against district list\n        for (const component of addressComponents) {\n          detectedDistrict = districts.data.find(district => {\n            const districtUpper = district.toUpperCase();\n            const componentUpper = component.toUpperCase();\n\n            // Exact match or contains match\n            return districtUpper === componentUpper || componentUpper.includes(districtUpper) || districtUpper.includes(componentUpper.split(' ')[0]);\n          });\n          if (detectedDistrict) break;\n        }\n\n        // Fallback: Check if we're in Tamil Nadu\n        if (!detectedDistrict && (_addressData$address5 = addressData.address) !== null && _addressData$address5 !== void 0 && (_addressData$address6 = _addressData$address5.state) !== null && _addressData$address6 !== void 0 && _addressData$address6.includes('Tamil Nadu')) {\n          // Default to Chennai if in Tamil Nadu but district not found\n          detectedDistrict = districts.data.find(d => d.includes('CHENNAI'));\n        }\n        resolve(detectedDistrict || null);\n      } catch (error) {\n        reject(error);\n      }\n    }, error => reject(error), {\n      timeout: 15000,\n      enableHighAccuracy: true\n    });\n  });\n};","map":{"version":3,"names":["axios","API_BASE","api","getDistricts","get","getDistrictData","district","getStateAverage","refreshData","post","detectLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","_addressData$address","_addressData$address2","_addressData$address3","_addressData$address4","_addressData$address5","_addressData$address6","response","coords","latitude","longitude","addressData","data","districts","addressComponents","address","state_district","county","city","town","display_name","filter","Boolean","detectedDistrict","component","find","districtUpper","toUpperCase","componentUpper","includes","split","state","d","error","timeout","enableHighAccuracy"],"sources":["C:/Users/veera/OneDrive/Desktop/Web App/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE = '/api';\n\nexport const api = {\n  getDistricts: () => axios.get(`${API_BASE}/districts`),\n  getDistrictData: (district) => axios.get(`${API_BASE}/district/${district}`),\n  getStateAverage: () => axios.get(`${API_BASE}/state-average`),\n  refreshData: () => axios.post(`${API_BASE}/refresh-data`)\n};\n\nexport const detectLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          // Use Nominatim for reverse geocoding\n          const response = await axios.get(\n            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}&addressdetails=1`\n          );\n          \n          const addressData = response.data;\n          const districts = await api.getDistricts();\n          \n          // Try multiple address components\n          const addressComponents = [\n            addressData.address?.state_district,\n            addressData.address?.county,\n            addressData.address?.city,\n            addressData.address?.town,\n            addressData.display_name\n          ].filter(Boolean);\n          \n          let detectedDistrict = null;\n          \n          // Check each address component against district list\n          for (const component of addressComponents) {\n            detectedDistrict = districts.data.find(district => {\n              const districtUpper = district.toUpperCase();\n              const componentUpper = component.toUpperCase();\n              \n              // Exact match or contains match\n              return districtUpper === componentUpper || \n                     componentUpper.includes(districtUpper) ||\n                     districtUpper.includes(componentUpper.split(' ')[0]);\n            });\n            \n            if (detectedDistrict) break;\n          }\n          \n          // Fallback: Check if we're in Tamil Nadu\n          if (!detectedDistrict && addressData.address?.state?.includes('Tamil Nadu')) {\n            // Default to Chennai if in Tamil Nadu but district not found\n            detectedDistrict = districts.data.find(d => d.includes('CHENNAI'));\n          }\n          \n          resolve(detectedDistrict || null);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      (error) => reject(error),\n      { timeout: 15000, enableHighAccuracy: true }\n    );\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}