{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = '/api';\nexport const api = {\n  getDistricts: () => axios.get(`${API_BASE}/districts`),\n  getDistrictData: district => axios.get(`${API_BASE}/district/${district}`),\n  getStateAverage: () => axios.get(`${API_BASE}/state-average`),\n  refreshData: () => axios.post(`${API_BASE}/refresh-data`)\n};\nexport const detectLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      try {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Tamil Nadu coordinates check\n        if (latitude < 8.0 || latitude > 13.5 || longitude < 76.0 || longitude > 80.5) {\n          reject(new Error('Location outside Tamil Nadu'));\n          return;\n        }\n        const districts = await api.getDistricts();\n\n        // Simple coordinate-based district mapping for major cities\n        const districtMap = {\n          'CHENNAI': {\n            lat: 13.0827,\n            lng: 80.2707,\n            radius: 0.5\n          },\n          'COIMBATORE': {\n            lat: 11.0168,\n            lng: 76.9558,\n            radius: 0.3\n          },\n          'MADURAI': {\n            lat: 9.9252,\n            lng: 78.1198,\n            radius: 0.3\n          },\n          'TIRUCHIRAPPALLI': {\n            lat: 10.7905,\n            lng: 78.7047,\n            radius: 0.3\n          },\n          'SALEM': {\n            lat: 11.664,\n            lng: 78.146,\n            radius: 0.3\n          },\n          'TIRUNELVELI': {\n            lat: 8.7139,\n            lng: 77.7567,\n            radius: 0.3\n          },\n          'VELLORE': {\n            lat: 12.9165,\n            lng: 79.1325,\n            radius: 0.3\n          }\n        };\n        let detectedDistrict = null;\n\n        // Find closest district\n        for (const [district, coords] of Object.entries(districtMap)) {\n          const distance = Math.sqrt(Math.pow(latitude - coords.lat, 2) + Math.pow(longitude - coords.lng, 2));\n          if (distance <= coords.radius && districts.data.includes(district)) {\n            detectedDistrict = district;\n            break;\n          }\n        }\n\n        // Fallback to first available district if in Tamil Nadu\n        if (!detectedDistrict && districts.data.length > 0) {\n          detectedDistrict = districts.data[0];\n        }\n        resolve(detectedDistrict);\n      } catch (error) {\n        reject(error);\n      }\n    }, error => {\n      if (error.code === 1) {\n        reject(new Error('Location access denied'));\n      } else if (error.code === 2) {\n        reject(new Error('Location unavailable'));\n      } else {\n        reject(new Error('Location timeout'));\n      }\n    }, {\n      timeout: 10000,\n      enableHighAccuracy: false\n    });\n  });\n};","map":{"version":3,"names":["axios","API_BASE","api","getDistricts","get","getDistrictData","district","getStateAverage","refreshData","post","detectLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","latitude","longitude","coords","districts","districtMap","lat","lng","radius","detectedDistrict","Object","entries","distance","Math","sqrt","pow","data","includes","length","error","code","timeout","enableHighAccuracy"],"sources":["C:/Users/veera/OneDrive/Desktop/Web App/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE = '/api';\n\nexport const api = {\n  getDistricts: () => axios.get(`${API_BASE}/districts`),\n  getDistrictData: (district) => axios.get(`${API_BASE}/district/${district}`),\n  getStateAverage: () => axios.get(`${API_BASE}/state-average`),\n  refreshData: () => axios.post(`${API_BASE}/refresh-data`)\n};\n\nexport const detectLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          \n          // Tamil Nadu coordinates check\n          if (latitude < 8.0 || latitude > 13.5 || longitude < 76.0 || longitude > 80.5) {\n            reject(new Error('Location outside Tamil Nadu'));\n            return;\n          }\n          \n          const districts = await api.getDistricts();\n          \n          // Simple coordinate-based district mapping for major cities\n          const districtMap = {\n            'CHENNAI': { lat: 13.0827, lng: 80.2707, radius: 0.5 },\n            'COIMBATORE': { lat: 11.0168, lng: 76.9558, radius: 0.3 },\n            'MADURAI': { lat: 9.9252, lng: 78.1198, radius: 0.3 },\n            'TIRUCHIRAPPALLI': { lat: 10.7905, lng: 78.7047, radius: 0.3 },\n            'SALEM': { lat: 11.664, lng: 78.146, radius: 0.3 },\n            'TIRUNELVELI': { lat: 8.7139, lng: 77.7567, radius: 0.3 },\n            'VELLORE': { lat: 12.9165, lng: 79.1325, radius: 0.3 }\n          };\n          \n          let detectedDistrict = null;\n          \n          // Find closest district\n          for (const [district, coords] of Object.entries(districtMap)) {\n            const distance = Math.sqrt(\n              Math.pow(latitude - coords.lat, 2) + Math.pow(longitude - coords.lng, 2)\n            );\n            \n            if (distance <= coords.radius && districts.data.includes(district)) {\n              detectedDistrict = district;\n              break;\n            }\n          }\n          \n          // Fallback to first available district if in Tamil Nadu\n          if (!detectedDistrict && districts.data.length > 0) {\n            detectedDistrict = districts.data[0];\n          }\n          \n          resolve(detectedDistrict);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      (error) => {\n        if (error.code === 1) {\n          reject(new Error('Location access denied'));\n        } else if (error.code === 2) {\n          reject(new Error('Location unavailable'));\n        } else {\n          reject(new Error('Location timeout'));\n        }\n      },\n      { timeout: 10000, enableHighAccuracy: false }\n    );\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}